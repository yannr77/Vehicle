1 Créer une Class Car.
2 Une voiture a un nom et une marque.
3 La méthode to_s doit être redéfini pour afficher les caractéristiques d'une voiture
4 Créer une méthode people
5 Un people a un nom et un age
6 Ajouter un conducteur a la voiture
7 Refuser un conducteur qui n'a pas l'age
8 Ajouter une méthode passengers , n'accpeter que 5 passager max
9 verifier qu'un passager n'est pas deux fois dans la voiture
10 véfifier qu'un passager n'es tpas aussi conductuer
11 Pouvoir retirer un passager de la voiture après qu'il y soit rentré
12 Si on demande un conducteur qui est déjà passager , le retirer de la liste des passagers
12bis, créer les passagers à partir d'un tableau dont le contenu est :
[["Yann",19], ["Nicolas",17], ...]

13 ajouter le  nombre de passagers à la description de la voiture

14 gérer la conduite accompagné, un conducteur entre 16 et 18 a le droit de conduire si au moins un autre passager a plus de 22 ans dans la voiture.

- savoir si un conducteur a entre 16 et 18
  methode d'instance de Passenger
  renvoi vrai ou faux

- savoir si un passager d'une voiture a plus de 22
  methode d'instance de voiture
  renvoi vrai ou faux

- avant de donner le volant, vérifier ces deux conditions
  modification de la methode driver=


15 ajouter une méthode d'instance à la classe Passager : enter_car(car)

----------------
15 bis : Faire un heritage pour tout simplifier.


16 Ajout d'une classe moto n'a qu'un seul passager psosible, sinon se comporte pareil
17 La méthode add_passengers doit permettre d'ajouter un tableau de passager
18 La méthode add_passenger doit accepter un tableau ou un seul passager
19 La méthode add_passenger doit faire une erreur si elle recoit autre chose qu'un passenger ou un tableau
20 ajouter une méthode drive_car sur un People (et l'implémanter)


21 Créer un compte sur : https://github.com/
22 Créer une clef ssh public keys en suivant les instructions.
